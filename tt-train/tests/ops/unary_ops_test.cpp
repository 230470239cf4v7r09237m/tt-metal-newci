// SPDX-FileCopyrightText: (c) 2024 Tenstorrent AI ULC
//
// SPDX-License-Identifier: Apache-2.0

#include "ops/unary_ops.hpp"

#include <gtest/gtest.h>

#include <core/ttnn_all_includes.hpp>

#include "autograd/auto_context.hpp"
#include "autograd/tensor.hpp"
#include "core/tt_tensor_utils.hpp"
#include "ops/losses.hpp"

class UnaryOpsTest : public ::testing::Test {
protected:
    void SetUp() override {
        ttml::autograd::ctx().open_device();
    }

    void TearDown() override {
        ttml::autograd::ctx().close_device();
    }
};

TEST_F(UnaryOpsTest, GlobalMean) {
    std::vector<float> test_data = {1.F, 2.F, 3.F, 4.F, 1.F, 2.F, 3.F, 4.F};

    auto shape = ttml::core::create_shape({2, 1, 1, 4});
    auto tensor = ttml::core::from_vector(test_data, shape, &ttml::autograd::ctx().get_device());

    auto tensor_ptr = ttml::autograd::create_tensor(tensor);

    auto result = ttml::ops::mean(tensor_ptr);
    auto result_data = ttml::core::to_vector(result->get_value());

    ASSERT_EQ(result_data.size(), 1);
    EXPECT_FLOAT_EQ(result_data[0], 2.5F);

    result->backward();
    auto tensor_grad = ttml::core::to_vector(tensor_ptr->get_grad());
    ASSERT_EQ(tensor_grad.size(), test_data.size());
    for (float it : tensor_grad) {
        EXPECT_FLOAT_EQ(it, 0.125F);
    }
}

TEST_F(UnaryOpsTest, LogSoftmax) {
    auto* device = &ttml::autograd::ctx().get_device();
    std::vector<float> test_data = {-0.1F, -0.2F, -0.3F, -0.4F, 0.F, -0.2F, -0.3F, -0.4F};
    auto tensor = ttml::core::from_vector(test_data, ttml::core::create_shape({2, 1, 1, 4}), device);
    auto tensor_ptr = ttml::autograd::create_tensor(tensor);
    auto result = ttml::ops::log_softmax_moreh(tensor_ptr, 3);
    auto result_data = ttml::core::to_vector(result->get_value());
    std::vector<float> expected_data = {
        -1.24253553F, -1.34253553F, -1.44253553F, -1.54253553F, -1.17244159F, -1.37244159F, -1.47244159F, -1.57244159F};
    EXPECT_EQ(result_data.size(), expected_data.size());
    for (uint32_t idx = 0; idx < result_data.size(); ++idx) {
        EXPECT_NEAR(result_data[idx], expected_data[idx], 2e-2F);
    }

    result->backward();
    auto tensor_grad = ttml::core::to_vector(tensor_ptr->get_grad());
    std::vector<float> expected_grad = {-0.156F, -0.03906F, 0.05078F, 0.1406F, -0.25F, -0.0156F, 0.07421F, 0.16406F};
    EXPECT_EQ(tensor_grad.size(), expected_grad.size());
    for (uint32_t idx = 0; idx < tensor_grad.size(); ++idx) {
        EXPECT_NEAR(tensor_grad[idx], expected_grad[idx], 2e-2F);
    }
}

TEST_F(UnaryOpsTest, Silu) {
    namespace core = ttml::core;
    auto N = 4;
    auto C = 1;
    auto H = 20;
    auto W = 5;
    auto len = static_cast<float>(N * C * H * W);
    xt::xarray<float> a = xt::arange<float>(-10.F, len - 10.F).reshape({N, C, H, W});
    xt::xarray<float> expected_silu = {
        {{{-0.00045F, -0.00111F, -0.00269F, -0.00638F, -0.01483F},
          {-0.03345F, -0.07178F, -0.14258F, -0.23828F, -0.26953F},
          {0.00000F, 0.73047F, 1.75781F, 2.85938F, 3.92188F},
          {4.96875F, 6.00000F, 7.00000F, 8.00000F, 9.00000F},
          {10.00000F, 11.00000F, 12.00000F, 13.00000F, 14.00000F},
          {15.00000F, 16.00000F, 17.00000F, 18.00000F, 19.00000F},
          {20.00000F, 21.00000F, 22.00000F, 23.00000F, 24.00000F},
          {25.00000F, 26.00000F, 27.00000F, 28.00000F, 29.00000F},
          {30.00000F, 31.00000F, 32.00000F, 33.00000F, 34.00000F},
          {35.00000F, 36.00000F, 37.00000F, 38.00000F, 39.00000F},
          {40.00000F, 41.00000F, 42.00000F, 43.00000F, 44.00000F},
          {45.00000F, 46.00000F, 47.00000F, 48.00000F, 49.00000F},
          {50.00000F, 51.00000F, 52.00000F, 53.00000F, 54.00000F},
          {55.00000F, 56.00000F, 57.00000F, 58.00000F, 59.00000F},
          {60.00000F, 61.00000F, 62.00000F, 63.00000F, 64.00000F},
          {65.00000F, 66.00000F, 67.00000F, 68.00000F, 69.00000F},
          {70.00000F, 71.00000F, 72.00000F, 73.00000F, 74.00000F},
          {75.00000F, 76.00000F, 77.00000F, 78.00000F, 79.00000F},
          {80.00000F, 81.00000F, 82.00000F, 83.00000F, 84.00000F},
          {85.00000F, 86.00000F, 87.00000F, 88.00000F, 89.00000F}}},
        {{{90.00000F, 91.00000F, 92.00000F, 93.00000F, 94.00000F},
          {95.00000F, 96.00000F, 97.00000F, 98.00000F, 99.00000F},
          {100.00000F, 101.00000F, 102.00000F, 103.00000F, 104.00000F},
          {105.00000F, 106.00000F, 107.00000F, 108.00000F, 109.00000F},
          {110.00000F, 111.00000F, 112.00000F, 113.00000F, 114.00000F},
          {115.00000F, 116.00000F, 117.00000F, 118.00000F, 119.00000F},
          {120.00000F, 121.00000F, 122.00000F, 123.00000F, 124.00000F},
          {125.00000F, 126.00000F, 127.00000F, 128.00000F, 129.00000F},
          {130.00000F, 131.00000F, 132.00000F, 133.00000F, 134.00000F},
          {135.00000F, 136.00000F, 137.00000F, 138.00000F, 139.00000F},
          {140.00000F, 141.00000F, 142.00000F, 143.00000F, 144.00000F},
          {145.00000F, 146.00000F, 147.00000F, 148.00000F, 149.00000F},
          {150.00000F, 151.00000F, 152.00000F, 153.00000F, 154.00000F},
          {155.00000F, 156.00000F, 157.00000F, 158.00000F, 159.00000F},
          {160.00000F, 161.00000F, 162.00000F, 163.00000F, 164.00000F},
          {165.00000F, 166.00000F, 167.00000F, 168.00000F, 169.00000F},
          {170.00000F, 171.00000F, 172.00000F, 173.00000F, 174.00000F},
          {175.00000F, 176.00000F, 177.00000F, 178.00000F, 179.00000F},
          {180.00000F, 181.00000F, 182.00000F, 183.00000F, 184.00000F},
          {185.00000F, 186.00000F, 187.00000F, 188.00000F, 189.00000F}}},
        {{{190.00000F, 191.00000F, 192.00000F, 193.00000F, 194.00000F},
          {195.00000F, 196.00000F, 197.00000F, 198.00000F, 199.00000F},
          {200.00000F, 201.00000F, 202.00000F, 203.00000F, 204.00000F},
          {205.00000F, 206.00000F, 207.00000F, 208.00000F, 209.00000F},
          {210.00000F, 211.00000F, 212.00000F, 213.00000F, 214.00000F},
          {215.00000F, 216.00000F, 217.00000F, 218.00000F, 219.00000F},
          {220.00000F, 221.00000F, 222.00000F, 223.00000F, 224.00000F},
          {225.00000F, 226.00000F, 227.00000F, 228.00000F, 229.00000F},
          {230.00000F, 231.00000F, 232.00000F, 233.00000F, 234.00000F},
          {235.00000F, 236.00000F, 237.00000F, 238.00000F, 239.00000F},
          {240.00000F, 241.00000F, 242.00000F, 243.00000F, 244.00000F},
          {245.00000F, 246.00000F, 247.00000F, 248.00000F, 249.00000F},
          {250.00000F, 251.00000F, 252.00000F, 253.00000F, 254.00000F},
          {255.00000F, 256.00000F, 256.00000F, 258.00000F, 260.00000F},
          {260.00000F, 260.00000F, 262.00000F, 264.00000F, 264.00000F},
          {264.00000F, 266.00000F, 268.00000F, 268.00000F, 268.00000F},
          {270.00000F, 272.00000F, 272.00000F, 272.00000F, 274.00000F},
          {276.00000F, 276.00000F, 276.00000F, 278.00000F, 280.00000F},
          {280.00000F, 280.00000F, 282.00000F, 284.00000F, 284.00000F},
          {284.00000F, 286.00000F, 288.00000F, 288.00000F, 288.00000F}}},
        {{{290.00000F, 292.00000F, 292.00000F, 292.00000F, 294.00000F},
          {296.00000F, 296.00000F, 296.00000F, 298.00000F, 300.00000F},
          {300.00000F, 300.00000F, 302.00000F, 304.00000F, 304.00000F},
          {304.00000F, 306.00000F, 308.00000F, 308.00000F, 308.00000F},
          {310.00000F, 312.00000F, 312.00000F, 312.00000F, 314.00000F},
          {316.00000F, 316.00000F, 316.00000F, 318.00000F, 320.00000F},
          {320.00000F, 320.00000F, 322.00000F, 324.00000F, 324.00000F},
          {324.00000F, 326.00000F, 328.00000F, 328.00000F, 328.00000F},
          {330.00000F, 332.00000F, 332.00000F, 332.00000F, 334.00000F},
          {336.00000F, 336.00000F, 336.00000F, 338.00000F, 340.00000F},
          {340.00000F, 340.00000F, 342.00000F, 344.00000F, 344.00000F},
          {344.00000F, 346.00000F, 348.00000F, 348.00000F, 348.00000F},
          {350.00000F, 352.00000F, 352.00000F, 352.00000F, 354.00000F},
          {356.00000F, 356.00000F, 356.00000F, 358.00000F, 360.00000F},
          {360.00000F, 360.00000F, 362.00000F, 364.00000F, 364.00000F},
          {364.00000F, 366.00000F, 368.00000F, 368.00000F, 368.00000F},
          {370.00000F, 372.00000F, 372.00000F, 372.00000F, 374.00000F},
          {376.00000F, 376.00000F, 376.00000F, 378.00000F, 380.00000F},
          {380.00000F, 380.00000F, 382.00000F, 384.00000F, 384.00000F},
          {384.00000F, 386.00000F, 388.00000F, 388.00000F, 388.00000F}}}};

    auto a_tensor = ttml::autograd::create_tensor(core::from_xtensor(a, &ttml::autograd::ctx().get_device()));
    auto computed_silu = ttml::ops::silu(a_tensor);
    auto computed_silu_xtensor = core::to_xtensor(computed_silu->get_value());
    EXPECT_TRUE(xt::allclose(computed_silu_xtensor, expected_silu, 8e-3F, 4e-2F));

    xt::xarray<float> expected_silu_grad_ = {
        0.00000F, 0.00000F, 0.00000F, 0.00000F, 0.00000F, 0.00000F, 0.00002F, 0.00006F, 0.00011F, -0.00010F, 0.00000F,
        0.00339F, 0.00961F, 0.01555F, 0.02067F, 0.02549F, 0.03029F, 0.03516F, 0.04008F, 0.04504F, 0.05002F,  0.05501F,
        0.06000F, 0.06500F, 0.07000F, 0.07500F, 0.08000F, 0.08500F, 0.09000F, 0.09500F, 0.10000F, 0.10500F,  0.11000F,
        0.11500F, 0.12000F, 0.12500F, 0.13000F, 0.13500F, 0.14000F, 0.14500F, 0.15000F, 0.15500F, 0.16000F,  0.16500F,
        0.17000F, 0.17500F, 0.18000F, 0.18500F, 0.19000F, 0.19500F, 0.20000F, 0.20500F, 0.21000F, 0.21500F,  0.22000F,
        0.22500F, 0.23000F, 0.23500F, 0.24000F, 0.24500F, 0.25000F, 0.25500F, 0.26000F, 0.26500F, 0.27000F,  0.27500F,
        0.28000F, 0.28500F, 0.29000F, 0.29500F, 0.30000F, 0.30500F, 0.31000F, 0.31500F, 0.32000F, 0.32500F,  0.33000F,
        0.33500F, 0.34000F, 0.34500F, 0.35000F, 0.35500F, 0.36000F, 0.36500F, 0.37000F, 0.37500F, 0.38000F,  0.38500F,
        0.39000F, 0.39500F, 0.40000F, 0.40500F, 0.41000F, 0.41500F, 0.42000F, 0.42500F, 0.43000F, 0.43500F,  0.44000F,
        0.44500F, 0.45000F, 0.45500F, 0.46000F, 0.46500F, 0.47000F, 0.47500F, 0.48000F, 0.48500F, 0.49000F,  0.49500F,
        0.50000F, 0.50500F, 0.51000F, 0.51500F, 0.52000F, 0.52500F, 0.53000F, 0.53500F, 0.54000F, 0.54500F,  0.55000F,
        0.55500F, 0.56000F, 0.56500F, 0.57000F, 0.57500F, 0.58000F, 0.58500F, 0.59000F, 0.59500F, 0.60000F,  0.60500F,
        0.61000F, 0.61500F, 0.62000F, 0.62500F, 0.63000F, 0.63500F, 0.64000F, 0.64500F, 0.65000F, 0.65500F,  0.66000F,
        0.66500F, 0.67000F, 0.67500F, 0.68000F, 0.68500F, 0.69000F, 0.69500F, 0.70000F, 0.70500F, 0.71000F,  0.71500F,
        0.72000F, 0.72500F, 0.73000F, 0.73500F, 0.74000F, 0.74500F, 0.75000F, 0.75500F, 0.76000F, 0.76500F,  0.77000F,
        0.77500F, 0.78000F, 0.78500F, 0.79000F, 0.79500F, 0.80000F, 0.80500F, 0.81000F, 0.81500F, 0.82000F,  0.82500F,
        0.83000F, 0.83500F, 0.84000F, 0.84500F, 0.85000F, 0.85500F, 0.86000F, 0.86500F, 0.87000F, 0.87500F,  0.88000F,
        0.88500F, 0.89000F, 0.89500F, 0.90000F, 0.90500F, 0.91000F, 0.91500F, 0.92000F, 0.92500F, 0.93000F,  0.93500F,
        0.94000F, 0.94500F, 0.95000F, 0.95500F, 0.96000F, 0.96500F, 0.97000F, 0.97500F, 0.98000F, 0.98500F,  0.99000F,
        0.99500F, 1.00000F, 1.00500F, 1.01000F, 1.01500F, 1.02000F, 1.02500F, 1.03000F, 1.03500F, 1.04000F,  1.04500F,
        1.05000F, 1.05500F, 1.06000F, 1.06500F, 1.07000F, 1.07500F, 1.08000F, 1.08500F, 1.09000F, 1.09500F,  1.10000F,
        1.10500F, 1.11000F, 1.11500F, 1.12000F, 1.12500F, 1.13000F, 1.13500F, 1.14000F, 1.14500F, 1.15000F,  1.15500F,
        1.16000F, 1.16500F, 1.17000F, 1.17500F, 1.18000F, 1.18500F, 1.19000F, 1.19500F, 1.20000F, 1.20500F,  1.21000F,
        1.21500F, 1.22000F, 1.22500F, 1.23000F, 1.23500F, 1.24000F, 1.24500F, 1.25000F, 1.25500F, 1.26000F,  1.26500F,
        1.27000F, 1.27500F, 1.28000F, 1.28500F, 1.29000F, 1.29500F, 1.30000F, 1.30500F, 1.31000F, 1.31500F,  1.32000F,
        1.32500F, 1.33000F, 1.33500F, 1.34000F, 1.34500F, 1.35000F, 1.35500F, 1.36000F, 1.36500F, 1.37000F,  1.37500F,
        1.38000F, 1.38500F, 1.39000F, 1.39500F, 1.40000F, 1.40500F, 1.41000F, 1.41500F, 1.42000F, 1.42500F,  1.43000F,
        1.43500F, 1.44000F, 1.44500F, 1.45000F, 1.45500F, 1.46000F, 1.46500F, 1.47000F, 1.47500F, 1.48000F,  1.48500F,
        1.49000F, 1.49500F, 1.50000F, 1.50500F, 1.51000F, 1.51500F, 1.52000F, 1.52500F, 1.53000F, 1.53500F,  1.54000F,
        1.54500F, 1.55000F, 1.55500F, 1.56000F, 1.56500F, 1.57000F, 1.57500F, 1.58000F, 1.58500F, 1.59000F,  1.59500F,
        1.60000F, 1.60500F, 1.61000F, 1.61500F, 1.62000F, 1.62500F, 1.63000F, 1.63500F, 1.64000F, 1.64500F,  1.65000F,
        1.65500F, 1.66000F, 1.66500F, 1.67000F, 1.67500F, 1.68000F, 1.68500F, 1.69000F, 1.69500F, 1.70000F,  1.70500F,
        1.71000F, 1.71500F, 1.72000F, 1.72500F, 1.73000F, 1.73500F, 1.74000F, 1.74500F, 1.75000F, 1.75500F,  1.76000F,
        1.76500F, 1.77000F, 1.77500F, 1.78000F, 1.78500F, 1.79000F, 1.79500F, 1.80000F, 1.80500F, 1.81000F,  1.81500F,
        1.82000F, 1.82500F, 1.83000F, 1.83500F, 1.84000F, 1.84500F, 1.85000F, 1.85500F, 1.86000F, 1.86500F,  1.87000F,
        1.87500F, 1.88000F, 1.88500F, 1.89000F, 1.89500F, 1.90000F, 1.90500F, 1.91000F, 1.91500F, 1.92000F,  1.92500F,
        1.93000F, 1.93500F, 1.94000F, 1.94500F};
    xt::xarray<float> expected_silu_grad = expected_silu_grad_.reshape({N, C, H, W});

    auto target = ttml::autograd::create_tensor(core::zeros_like(computed_silu->get_value()));
    auto result = ttml::ops::mse_loss(computed_silu, target);
    result->backward();
    auto computed_silu_grad = core::to_xtensor(computed_silu->get_grad());
    EXPECT_TRUE(xt::allclose(computed_silu_grad, expected_silu_grad, 8e-3F, 4e-2F));
}
