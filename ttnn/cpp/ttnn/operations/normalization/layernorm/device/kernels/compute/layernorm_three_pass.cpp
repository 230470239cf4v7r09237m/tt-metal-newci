
// SPDX-FileCopyrightText: © 2023 Tenstorrent Inc.
//
// SPDX-License-Identifier: Apache-2.0

#include <cstdint>

#define REDUCE_OP PoolType::SUM
#define REDUCE_DIM ReduceDim::REDUCE_SCALAR

#define BCAST_LLKOP EltwiseBinaryType::ELWMUL
#define BCAST_DIM BroadcastType::COL

#include "compute_kernel_api.h"
#include "compute_kernel_api/reduce.h"
#include "compute_kernel_api/bcast.h"
#include "compute_kernel_api/eltwise_binary.h"
#include "compute_kernel_api/layernorm.h"

ALWI void ACQ() { acquire_dst(); }
ALWI void REL() { release_dst(); }

namespace NAMESPACE {
template <
    EltwiseBinaryType eltwise_binary_type = ELWADD,
    EltwiseBinaryReuseDestType binary_reuse_dest = EltwiseBinaryReuseDestType::NONE,
    BroadcastType b_type = BroadcastType::NONE>
ALWI void binary_dest_reuse_tiles_init_custom(uint32_t icb0) {
    UNPACK((llk_unpack_A_init<b_type, true, binary_reuse_dest>(false, false, icb0)));
    MATH((llk_math_eltwise_binary_init<eltwise_binary_type, NONE, MATH_FIDELITY, binary_reuse_dest>(false, false)));
}
template <
    EltwiseBinaryType eltwise_binary_type = ELWADD,
    EltwiseBinaryReuseDestType binary_reuse_dest = EltwiseBinaryReuseDestType::NONE,
    BroadcastType b_type = BroadcastType::NONE>
ALWI void binary_dest_reuse_tiles_custom(uint32_t in_cb_id, uint32_t in_tile_index, uint32_t dst_tile_index) {
    UNPACK((llk_unpack_A<BroadcastType::NONE, true, binary_reuse_dest>(in_cb_id, in_tile_index)));
    MATH((llk_math_eltwise_binary<eltwise_binary_type, NONE, MATH_FIDELITY, binary_reuse_dest, DST_ACCUM_MODE>(
        in_tile_index, in_tile_index, dst_tile_index)));
}

void MAIN {
    uint32_t NCHt = get_arg_val<uint32_t>(0);
    constexpr uint32_t Wt = get_compile_time_arg_val(0);
    constexpr uint32_t blk = get_compile_time_arg_val(1);
    constexpr uint32_t do_gamma = get_compile_time_arg_val(2);
    constexpr uint32_t do_beta = get_compile_time_arg_val(3);
    constexpr bool FLOAT32_DTYPE = get_compile_time_arg_val(4) == 1;

    constexpr uint32_t onetile = 1;
    // reserve one tile for zeros on cb_in2
    // TODO(AP): check that if DST is indeed zeroed by release_dst (and initially), we can use it as zeroes

    // Note that the entire W dimension must fit in the intermed0 CB for this kernel to be correct
    constexpr auto cb_scaler = tt::CBIndex::c_2;  // single tile generated by the reader
    constexpr auto cb_eps = tt::CBIndex::c_3;     // single tile generated by the reader
    constexpr auto cb_in = tt::CBIndex::c_0;      // input x or a for fused pre-add (x=a+b)
    constexpr auto cb_inb = tt::CBIndex::c_1;     // input b for fused pre-add
    constexpr auto cb_out = tt::CBIndex::c_16;    // output
    constexpr auto cb_gamma = tt::CBIndex::c_5;
    constexpr auto cb_beta = tt::CBIndex::c_6;
#if defined RMSNORM and not defined FUSE_PRE_ADD
    constexpr uint32_t cb_xmm = cb_in;  // x minus mean
#else
    constexpr uint32_t cb_xmm = tt::CBIndex::c_24;  // x minus mean
#endif
    constexpr auto cb_ex = tt::CBIndex::c_25;      // E[x]
    constexpr auto cb_ex2 = tt::CBIndex::c_26;     // E[(x-E[x])^2]
    constexpr auto cb_xmm2 = tt::CBIndex::c_27;    // xmm^2
    constexpr auto cb_ex2pe = tt::CBIndex::c_28;   // E[(x-E[x])^2]+eps
    constexpr auto cb_fusion = tt::CBIndex::c_29;  // stream gamma/beta
    constexpr auto scaler0 = 0;
#ifdef FUSE_PRE_ADD
#ifdef RMSNORM
    constexpr uint32_t cb_x = cb_xmm;
#else
    constexpr uint32_t cb_x = tt::CBIndex::c_30;
#endif
#else
    constexpr uint32_t cb_x = cb_in;
#endif

#ifdef FUSE_PRE_ADD
    binary_op_init_common(cb_in, cb_inb, cb_x);
#else
    binary_op_init_common(cb_in, cb_in, cb_xmm2);
#endif

    cb_wait_front(cb_scaler, 1);  // comes from the reader
    cb_wait_front(cb_eps, 1);     // comes from the reader

    constexpr int cb_im_or_out = (do_gamma | do_beta) ? cb_fusion : cb_out;

    for (uint32_t ncht = 0; ncht < NCHt; ncht++) {
        constexpr int onetile = 1;
        constexpr int dst0 = 0;
        constexpr int dst1 = 1;
        constexpr int dst2 = 2;

        /*
         * X + Y
         */
        ACQ();
        cb_reserve_back(cb_ex, onetile);
        auto prepare_cb_x = [&]() {
#ifdef FUSE_PRE_ADD
            reconfig_data_format(cb_in, cb_inb);
            pack_reconfig_data_format(cb_x);
            add_tiles_init(cb_in, cb_inb);
            cb_wait_front(cb_in, blk);

            cb_wait_front(cb_inb, blk);
            cb_reserve_back(cb_x, blk);
            for (uint32_t j = 0; j < blk; j++) {
                add_tiles(cb_in, cb_inb, j, j, j);
                pack_tile(j, cb_x);
            }

            cb_push_back(cb_x, blk);  // push the sum into the same buffer
            cb_pop_front(cb_inb, blk);
            cb_pop_front(cb_in, blk);
#endif
            cb_wait_front(cb_x, blk);
        };
        // E[x]
        // aka ∑(x-E[x])
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            prepare_cb_x();
            reconfig_data_format(cb_x, cb_scaler);
            pack_reconfig_data_format(cb_ex);
            reduce_init_delta<false>(cb_x, cb_scaler, cb_ex);
            for (uint32_t j = 0; j < blk; j++) {
                reduce_tile(cb_x, cb_scaler, j, scaler0, 1);
            }
            cb_pop_front(cb_x, blk);
        }
        pack_tile(1, cb_ex);
        reduce_revert_delta(cb_ex);
        cb_push_back(cb_ex, 1);
        REL();
        // cb_pop_front(cb_ex, 1);
        // cb_pop_front(cb_x, blk);

        // Var Calculation
        // aka ∑(x-E[x])^2
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            ACQ();
            prepare_cb_x();
            reconfig_data_format(cb_x, cb_ex);
            pack_reconfig_data_format(cb_xmm);
            cb_reserve_back(cb_xmm, blk);
            sub_bcast_cols_init_short(cb_x, cb_ex);

            cb_wait_front(cb_ex, 1);
            // x-E[x]
            for (uint32_t j = 0; j < blk; j++) {
                // add init for sub
                sub_tiles_bcast_cols(cb_x, cb_ex, j, 0, j);  // tile *= 1/(sum(exp(x)))
            }
            cb_pop_front(cb_x, blk);
            square_tile_init();
            //(x-E[x])^2
            for (uint32_t j = 0; j < blk; j++) {
                square_tile(dst1);
                pack_tile(dst1, cb_xmm);
            }
            cb_reserve_back(cb_xmm, blk);
            cb_push_back(cb_xmm, blk);
            REL();

            ACQ();
            if (wt > 0) {
                // adds the last loop iterations reduction value to dst0 since dst0 is overwritten between loop
                // iterations
                cb_wait_front(cb_ex2, 1);
                reconfig_data_format(cb_ex2, cb_scaler);
                reduce_init_delta<false>(cb_ex2, cb_scaler, cb_ex2);
                reduce_tile(cb_ex2, cb_scaler, 0, scaler0, dst0);
                cb_pop_front(cb_ex2, 1);
            }

            reconfig_data_format(cb_xmm, cb_scaler);
            reduce_init_delta<false>(cb_xmm, cb_scaler, cb_ex2);
            // ∑(x-E[x])^2
            for (uint32_t j = 0; j < blk; j++) {
                reduce_tile(cb_xmm, cb_scaler, j, scaler0, dst0);
            }
            cb_pop_front(cb_xmm, blk);

            pack_reconfig_data_format(cb_ex2);
            pack_tile(dst0, cb_ex2);
            reduce_revert_delta(cb_ex2);
            cb_reserve_back(cb_ex2, 1);
            cb_push_back(cb_ex2, 1);
            REL();
        }

        ACQ();
        add_tiles_init(cb_ex2, cb_eps);
        add_tiles(cb_ex2, cb_eps, 0, 0, dst0);

        cb_reserve_back(cb_ex2pe, onetile);  // 1
        sqrt_tile_init();
        sqrt_tile(dst0);
        recip_tile_init();
        recip_tile(dst0);
        pack_tile(dst0, cb_ex2pe);
        cb_push_back(cb_ex2pe, onetile);
        REL();
        cb_pop_front(cb_ex2, onetile);
        // Final Val Calc
        ACQ();
        for (uint32_t wt = 0; wt < Wt; wt++) {
            PACK(DPRINT << wt << "Before prepare_cb_x \n\n!" << ENDL());
            prepare_cb_x();
            PACK(DPRINT << wt << "After prepare_cb_x \n\n!" << ENDL());
            reconfig_data_format(cb_x, cb_ex);
            cb_reserve_back(cb_xmm, blk);
            sub_bcast_cols_init_short(cb_x, cb_ex);
            PACK(DPRINT << wt << "Before sub pack thread!" << ENDL());
            for (uint32_t j = 0; j < blk; j++) {
                // populate block with x - mean
                sub_tiles_bcast_cols(cb_x, cb_ex, j, 0, j);  // tile *= 1/(sum(exp(x)))
            }
            cb_pop_front(cb_x, blk);

            PACK(DPRINT << wt << " After sub pack thread x!" << ENDL());
            binary_dest_reuse_tiles_init_custom<ELWMUL, EltwiseBinaryReuseDestType::NONE, BroadcastType::COL>(cb_ex2pe);
            for (uint32_t j = 0; j < blk; j++) {
                // continue to mult with var
                binary_dest_reuse_tiles_custom<ELWMUL, EltwiseBinaryReuseDestType::NONE, BroadcastType::COL>(
                    cb_ex2pe, j, j);
            }
            PACK(DPRINT << wt << " After mult pack thread x!" << ENDL());
            if (do_gamma) {
                cb_wait_front(cb_gamma, blk);
            }
            if (do_beta) {
                cb_wait_front(cb_beta, blk);
            }
            if (do_gamma) {
                binary_dest_reuse_tiles_init_custom<ELWMUL, EltwiseBinaryReuseDestType::NONE, BroadcastType::ROW>(
                    cb_gamma);
                for (uint32_t j = 0; j < blk; j++) {
                    binary_dest_reuse_tiles_custom<ELWMUL, EltwiseBinaryReuseDestType::NONE, BroadcastType::ROW>(
                        cb_gamma, j, j);
                }
                cb_pop_front(cb_gamma, blk);
            }
            if (do_beta) {
                binary_dest_reuse_tiles_init_custom<ELWADD, EltwiseBinaryReuseDestType::NONE, BroadcastType::ROW>(
                    cb_beta);
                for (uint32_t j = 0; j < blk; j++) {
                    binary_dest_reuse_tiles_custom<ELWADD, EltwiseBinaryReuseDestType::NONE, BroadcastType::ROW>(
                        cb_beta, j, j);
                }
                cb_pop_front(cb_beta, blk);
            }
            PACK(DPRINT << wt << "Before pack reconfig!\n\n\n" << ENDL());
            pack_reconfig_data_format(cb_x, cb_out);
            PACK(DPRINT << wt << "After pack reconfig!\n\n\n" << ENDL());
            for (uint32_t j = 0; j < blk; j++) {
                pack_tile(j, cb_out);
            }
            cb_reserve_back(cb_out, blk);
            cb_push_back(cb_out, blk);
        }
        REL();
        DPRINT << "ENDED!" << ENDL();
    }  // NCHt loop
    // cb_pop_front(cb_scaler, 1); // optional for correctness
    // cb_pop_front(cb_eps, 1); // optional for correctness
    // cb_pop_front(cb_col1, 1); // optional for correctness
}
}  // namespace NAMESPACE
