name: "[internal] Slow Dispatch unit tests impl"

on:
  workflow_call:
    inputs:
      arch:
        required: true
        type: string
      runner-label:
        required: true
        type: string
      docker-image:
        required: true
        type: string
      timeout:
        required: false
        type: number
        default: 35
      os:
        required: false
        type: string
        default: "ubuntu-22.04"
      build-artifact-name:
        required: true
        type: string
      wheel-artifact-name:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      arch:
        required: true
        type: choice
        options:
          - wormhole_b0
          - blackhole
      runner-label:
        required: true
        type: choice
        options:
          - N150
          - N300
          - BH
      docker-image:
        required: true
        type: string
      timeout:
        required: false
        type: number
        default: 35
      os:
        required: false
        type: string
        default: "ubuntu-22.04"
      build-artifact-name:
        required: true
        type: string
      wheel-artifact-name:
        required: true
        type: string

jobs:
  cpp-unit-tests-slow-dispatch:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        test-group: [
          {name: All C++, cmd: ./tests/scripts/run_cpp_unit_tests.sh},
          {name: user kernel path, cmd: "rm -rf /tmp/kernels && TT_METAL_KERNEL_PATH=/tmp/kernels ./build/test/tt_metal/unit_tests_api_${{ inputs.arch }} --gtest_filter=CompileProgramWithKernelPathEnvVarFixture.*"},
          {name: api, cmd: "./build/test/tt_metal/unit_tests_api_${{ inputs.arch }}"},
          {name: debug_tools, cmd: "./build/test/tt_metal/unit_tests_debug_tools_${{ inputs.arch }}"},
          {name: device, cmd: "./build/test/tt_metal/unit_tests_device"},
          {name: dispatch, cmd: "./build/test/tt_metal/unit_tests_dispatch"},
          {name: eth, cmd: "./build/test/tt_metal/unit_tests_eth_${{ inputs.arch }}"},
          {name: llk, cmd: "./build/test/tt_metal/unit_tests_llk"},
          {name: stl, cmd: "./build/test/tt_metal/unit_tests_stl"},
          {name: distributed, cmd: "./build/test/tt_metal/distributed/distributed_unit_tests_${{ inputs.arch }} --gtest_filter=MeshDeviceSuite.*"},
          {name: FD2, cmd: ./tests/scripts/run_cpp_fd2_tests.sh},
        ]
    name: ${{ inputs.arch }} ${{ inputs.runner-label }} ${{ matrix.test-group.name }}
    runs-on:
      - ${{ inputs.runner-label }}
      - cloud-virtual-machine
      - in-service
    container:
      image: ${{ inputs.docker-image }}
      env:
        TT_METAL_HOME: /work
        PYTHONPATH: /work
        LD_LIBRARY_PATH: /work/build/lib
        ARCH_NAME: ${{ inputs.arch }}
        LOGURU_LEVEL: INFO
        TT_METAL_SLOW_DISPATCH_MODE: 1
        GTEST_OUTPUT: xml:/work/generated/test_reports/
        DONT_USE_VIRTUAL_ENVIRONMENT: 1
        GITHUB_ACTIONS: true
      volumes:
        - ${{ github.workspace }}/docker-job:/work # Subdir to workaround https://github.com/actions/runner/issues/691
        - /dev/hugepages-1G:/dev/hugepages-1G
      options: "--device /dev/tenstorrent"
    
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          path: docker-job # Here be dragons; keep it scoped to our desired volume, yet must be under github.workspace and be sure to clean up at the end
      - name: ⬇️ Download Build
        uses: actions/download-artifact@v4
        timeout-minutes: 10
        with:
          name: ${{ inputs.build-artifact-name }}
          path: docker-job
      - name: Extract files
        run: tar -xvf ttm_any.tar
      - name: ⬇️ Download Wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.wheel-artifact-name }}
          path: docker-job
      - name: Install Wheel
        run: |
          WHEEL_FILENAME=$(ls -1 *.whl)
          pip3 install $WHEEL_FILENAME
      - name: ${{ matrix.test-group.name }} tests
        timeout-minutes: ${{ inputs.timeout }}
        run: |
          pip install --force-reinstall pip==21.2.4
          mkdir -p generated/test_reports
          ${{ matrix.test-group.cmd }}
      - uses: ./.github/actions/slack-report
        if: ${{ failure() }}
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          owner: U06CXU895AP # Michael Chiou
      - uses: tenstorrent/tt-metal/.github/actions/upload-artifact-with-job-uuid@main
        timeout-minutes: 10
        if: ${{ !cancelled() }}
        with:
          path: |
            /work/generated/test_reports/
          prefix: "test_reports_"
      - name: Generate system logs on failure
        uses: ./.github/actions/generate-system-logs
        if: ${{ failure() }}
      - name: Generate gtest annotations on failure
        uses: ./.github/actions/generate-gtest-failure-message
        if: ${{ failure() }}
        with:
          path: |
            /work/generated/test_reports/
      - uses: tenstorrent/tt-metal/.github/actions/cleanup@main
        if: always()
