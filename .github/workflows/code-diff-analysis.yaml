name: "Code diff analysis"

on:
  workflow_call:
    inputs:
      os:
        required: false
        type: string
        default: "ubuntu-22.04-amd64"
  workflow_dispatch:
    inputs:
      os:
        required: false
        type: string
        default: "ubuntu-22.04-amd64"

jobs:
  build-docker-image:
    uses: ./.github/workflows/build-docker-artifact.yaml
    secrets: inherit
    with:
      os: ${{ inputs.os }}


  clang-tidy-diff:
    needs: build-docker-image
    env:
      ARCH_NAME: wormhole_b0
    runs-on:
      - build
      - in-service
    steps:
      - uses: tenstorrent/tt-metal/.github/actions/checkout-with-submodule-lfs@main
        with:
          fetch-depth: 0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
          echo "RUNNER_UID=$(id -u)" >> $GITHUB_ENV
          echo "RUNNER_GID=$(id -g)" >> $GITHUB_ENV
      - name: Update submodules
        run: |
          git submodule update --init --recursive
      - name: Generate docker tag
        id: generate-docker-tag
        uses: ./.github/actions/generate-docker-tag
        with:
          image: ${{ inputs.os }}
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull docker image
        run: docker pull ${{ env.TT_METAL_DOCKER_IMAGE_TAG }}
      - name: Analyze code with clang-tidy-diff
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.TT_METAL_DOCKER_IMAGE_TAG }}
          options: |
            --rm
            --tmpfs /tmp
            -u ${{ env.RUNNER_UID }}:${{ env.RUNNER_GID }}
            --group-add 1457
            -v ${{ github.workspace }}:${{ github.workspace }}
            -v /etc/passwd:/etc/passwd:ro
            -v /etc/shadow:/etc/shadow:ro
            -v /etc/bashrc:/etc/bashrc:ro
            -e ARCH_NAME=${{ env.ARCH_NAME }}
            -e CARGO_HOME=${{ github.workspace }}/.cargo
            -w ${{ github.workspace }}
          run: |
            set -eu # basic shell hygiene

            nice -n 19 ./build_metal.sh --export-compile-commands --build-all --skip-build

            # Find all touched files present in compile_commands.json
            # This is not as simple as filtering non-code files, as some code (eg: Kernels) are C++ code that
            # is not built at this level, and thus clang-tidy will be unable to process them.
            PREFIX=$(pwd)
            jq --arg prefix "$PREFIX/" -r '.[].file | sub("^" + $prefix; "")' build/compile_commands.json > relative_files_in_build.txt
            git diff --name-only "$(git merge-base HEAD "origin/main")..." > changed_files.txt
            grep -F -f relative_files_in_build.txt changed_files.txt > common_files.txt || true

            # Exit if there are no modified files known to CMake
            if [[ -s common_files.txt ]] || {
              echo "No files to analyze"
              exit 0
            }
            fi

            # Analyze the relevant diffs of the relevant files
            git diff "$(git merge-base HEAD "origin/main")" -- $(cat common_files.txt) > filtered_changes.diff
            clang-tidy-diff-17.py -p1 -path build -export-fixes fixes.yaml -j$(( $(nproc) / 2 )) < filtered_changes.diff

            if [ -s fixes.yaml ]; then
              echo "clang-tidy suggested fixes. Failing the workflow."
              cat fixes.yaml
              exit 1
            fi
