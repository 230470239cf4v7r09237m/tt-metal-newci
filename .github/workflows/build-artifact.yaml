name: "Build tt-metal artifacts"

on:
  workflow_call:
    inputs:
      arch:
        required: false
        type: string
        default: '["grayskull", "wormhole_b0"]'
      build-type:
        required: false
        type: string
        default: "Release"
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"
  workflow_dispatch:
    inputs:
      arch:
        required: false
        type: string
        default: '["grayskull", "wormhole_b0"]'
      build-type:
        required: false
        type: choice
        options:
          - Release
          - Debug
          - RelWithDebInfo
          - CI
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"
jobs:
  build-artifact:
    strategy:
      matrix:
        arch: ${{ fromJson(inputs.arch || '["grayskull", "wormhole_b0", "blackhole"]') }}
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.arch }}
      SILENT: 0
      VERBOSE: 1
      CCACHE_NOCOMPRESS: 1
      CCACHE_SLOPPINESS: pch_defines,time_macros,include_file_mtime
    environment: dev
    runs-on: 
      - build
      - in-service
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.13
        with:
          key: ${{ github.job }}-${{ inputs.build-type }}-${{ matrix.arch }}-${{ (inputs.tracy && '_profiler') || '' }}
          max-size: 25G  
          append-timestamp: false  
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - name: Update submodules
        run: |
          git submodule update --init --recursive
      - name: Build tt-metal and libs
        id: buildcpp
        continue-on-error: true
        run: |
          nice -n 19 cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} -DENABLE_TRACY=${{ inputs.tracy }} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          nice -n 19 cmake --build build --target tests
          nice -n 19 cmake --build build --target install
      - name: Retry again after ccache clear
        if: failure() && steps.buildcpp.outcome == 'failure'
        run: |
          ccache -C
          rm -rf build
          nice -n 19 cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} -DENABLE_TRACY=${{ inputs.tracy }} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          nice -n 19 cmake --build build --target tests
          nice -n 19 cmake --build build --target install
      - name: 'Tar files'
        run: tar -cvf ttm_${{ matrix.arch }}.tar build/lib ttnn/ttnn/*.so build/programming_examples build/test build/tools runtime
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.arch }}${{ (inputs.tracy && '_profiler') || '' }}
          path: ttm_${{ matrix.arch }}.tar
