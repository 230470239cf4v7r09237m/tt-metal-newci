name: "Build tt-metal artifacts"

on:
  workflow_call:
    inputs:
      arch:
        required: false
        type: string
        default: '["grayskull", "wormhole_b0"]'
      build-type:
        required: false
        type: string
        default: "Release"
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"
  workflow_dispatch:
    inputs:
      arch:
        required: false
        type: string
        default: '["grayskull", "wormhole_b0"]'
      build-type:
        required: false
        type: choice
        options:
          - Release
          - Debug
          - RelWithDebInfo
          - CI
        default: "Release"
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"

jobs:
  build-artifact:
    strategy:
      matrix:
        arch: ${{ fromJson(inputs.arch || '["grayskull", "wormhole_b0", "blackhole"]') }}
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.arch }}
      SILENT: 0
      VERBOSE: 1
    environment: dev
    runs-on:
      - build
      - in-service
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - name: Update submodules
        run: |
          git submodule update --init --recursive
      - name: Cache build artifacts
        id: cache-build-artifacts
        uses: actions/cache@v4
        with:
          path: build/
          key: build-${{ inputs.build-type }}-${{ matrix.arch }}-${{ inputs.tracy && 'tracy' || 'notracy' }}-${{ github.sha }}
          restore-keys:
            build-${{ inputs.build-type }}-${{ matrix.arch }}-${{ inputs.tracy && 'tracy' || 'notracy' }}
      - name: Re-generate CMake project
        run: nice -n 19 cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} -DENABLE_TRACY=${{ inputs.tracy }}
      - name: Build tt-metal and libs
        run: nice -n 19 cmake --build build --target tests
      - name: Install libs
        run: nice -n 19 cmake --build build --target install
      - name: 'Tar files'
        run: tar -cvf ttm_${{ matrix.arch }}.tar build/lib ttnn/ttnn/*.so build/programming_examples build/test build/tools runtime
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.arch }}${{ (inputs.tracy && '_profiler') || '' }}
          path: ttm_${{ matrix.arch }}.tar
      - name: Remove files for incremental builds
        run: |
          # Pre-compiled headers and CMakeCache rely on mtime and build host paths respectively, so
          # hard to transfer between machines
          find build/ -type f -name "*hxx*"
          rm -rf $(find build/ -type f -name "*hxx*")
          rm build/CMakeCache.txt
