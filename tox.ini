[tox]
envlist = 
    nightly_fast_dispatch
    model_performance
    performance_device_models
skipsdist = true

[testenv]
allowlist_externals=
    ./tests/scripts/run_tests.sh
setenv =
    ARCH_NAME={env:TT_ARCH}
    TT_METAL_HOME={env:TT_METAL_HOME}
    PYTHONPATH={env:PYTHONPATH}
deps = 
    -r tt_metal/python_env/requirements-dev.txt

[testenv:nightly_fast_dispatch]
description = Run the tests for Nightly Fast Dispatch
package_env = .pkg-models
envdir = {env:VENV_DIR}
setenv = 
    {[testenv]setenv}
deps = 
    {[testenv]deps}
    -r tt_metal/python_env/requirements-models.txt
commands = 
    pytest models/experimental/whisper -k whisper_attention
    pytest models/experimental/whisper -k WhipserDecoderLayer_inference
    pytest models/experimental/deit/tests/test_deit_for_image_classification_with_teacher.py -k test_deit_for_image_classification_with_teacher_inference
    pytest models/experimental/vit/tests/test_vit_image_classification.py -k test_vit_image_classification
    pytest models/experimental/t5/tests -k t5_dense_act_dense
    pytest models/experimental/t5/tests -k t5_layer_norm
    pytest models/experimental/t5/tests -k t5_layer_ff
    pytest models/experimental/roberta/tests -k roberta_self_attention
    pytest models/experimental/roberta/tests -k roberta_self_output
    pytest models/experimental/roberta/tests -k roberta_attention
    pytest models/experimental/roberta/tests -k roberta_intermediate
    pytest models/experimental/roberta/tests -k roberta_output
    pytest models/experimental/roberta/tests -k roberta_pooler
    pytest models/experimental/roberta/tests -k roberta_lm_head
    pytest models/experimental/roberta/tests -k roberta_classification_head
    pytest models/experimental/bloom/tests -k baddbmm
    pytest models/experimental/bloom/tests -k bloom_attention
    pytest models/experimental/bloom/tests -k bloom_gelu_forward
    pytest models/experimental/bloom/tests -k bloom_merge_heads
    pytest models/experimental/bloom/tests -k bloom_mlp
    pytest models/demos/metal_BERT_large_11/tests/test_bert_batch_dram.py -k batch_7-BFLOAT8_B-SHARDED
    pytest models/demos/metal_BERT_large_11/tests/test_demo.py::test_demo -k batch_7
    pytest models/demos/metal_BERT_large_11/tests/test_demo.py::test_demo_squadv2 -k batch_7
    pytest models/experimental/synthetic_gradients/tests -k test_batchnorm1d
    pytest models/experimental/synthetic_gradients/tests -k test_linear
    pytest models/experimental/synthetic_gradients/tests -k test_block
    pytest models/experimental/synthetic_gradients/tests -k test_full_inference
    pytest models/experimental/lenet/tests -k test_lenet_inference
    pytest models/experimental/convnet_mnist/tests -k mnist_inference
    pytest models/experimental/yolov5/tests -k Yolov5_detection_model
    pytest models/experimental/yolov3 -k conv2d_module
    pytest models/experimental/yolov3 -k conv_module
    pytest models/experimental/yolov3 -k concat_module
    pytest models/experimental/yolov3 -k bottleneck_module
    pytest models/experimental/yolov3 -k detect_module
    pytest models/experimental/yolov3 -k detection_model
    pytest models/experimental/yolov3 -k upsample_module
    pytest models/experimental/efficientnet/tests -k efficientnet_b0_model_real
    pytest models/experimental/efficientnet/tests -k efficientnet_v2_s_model_real
    pytest models/experimental/efficientnet/tests -k efficientnet_lite0_model_real
    pytest models/demos/falcon7b/tests/test_falcon_end_to_end.py::test_FalconCausalLM_end_to_end_with_program_cache[BFLOAT16-L1-falcon_7b-layers_32-prefill_seq128]
    pytest models/experimental/stable_diffusion/tests/test_embedding.py
    pytest models/demos/ttnn_falcon7b/tests -k falcon_mlp
    pytest models/demos/ttnn_falcon7b/tests -k falcon_rotary_embeddings
    pytest models/demos/ttnn_falcon7b/tests -k falcon_attention
    pytest models/demos/ttnn_falcon7b/tests -k falcon_decoder
[testenv:model_performance]
description = Run the tests for Model Performance Regressions
package_env = .pkg-models
envdir = {env:VENV_DIR}
setenv = 
    {[testenv]setenv}
deps = 
    {[testenv]deps}
    -r tt_metal/python_env/requirements-models.txt
commands = ./tests/scripts/run_tests.sh --tt-arch {env:TT_ARCH} --pipeline-type {env:MODEL_TYPE}_models_performance_{env:MACHINE_TYPE}

[testenv:performance_device_models]
description = Run the tests for Performance Device Models
package_env = .pkg-models
envdir = {env:VENV_DIR}
setenv = 
    {[testenv]setenv}
deps = 
    {[testenv]deps}
    -r tt_metal/python_env/requirements-models.txt
commands = ./tests/scripts/run_tests.sh  --tt-arch {env:TT_ARCH} --pipeline-type models_device_performance_{env:MACHINE_TYPE}

[testenv:.pkg-models]
setenv =
    ARCH_NAME={env:TT_ARCH}
passenv = ARCH_NAME
